# Docker Compose for Pricey Production
# Copyright (C) 2025 Matthias Wallner-GÃ©hri
# Licensed under AGPL-3.0

version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:18-alpine
    container_name: pricey-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-pricey}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?POSTGRES_PASSWORD is required}
      POSTGRES_DB: ${POSTGRES_DB:-pricey}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '${POSTGRES_PORT:-5432}:5432'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-pricey}']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  redis:
    image: redis:8-alpine
    container_name: pricey-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:?REDIS_PASSWORD is required}
    ports:
      - '${REDIS_PORT:-6379}:6379'
    healthcheck:
      test:
        ['CMD', 'sh', '-c', 'redis-cli -a $$REDIS_PASSWORD ping | grep PONG']
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  minio:
    image: minio/minio:latest
    container_name: pricey-minio-prod
    restart: unless-stopped
    command: server /data --console-address ':9001'
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:?MINIO_ROOT_USER is required}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:?MINIO_ROOT_PASSWORD is required}
    ports:
      - '${MINIO_PORT:-9000}:9000'
      - '${MINIO_CONSOLE_PORT:-9001}:9001'
    volumes:
      - minio_data:/data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  api-gateway:
    build:
      context: .
      dockerfile: docker/Dockerfile.api-gateway
    container_name: pricey-api-gateway-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3001
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER:-pricey}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pricey}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT:-http://minio:9000}
      STORAGE_REGION: ${STORAGE_REGION:-us-east-1}
      STORAGE_BUCKET: ${STORAGE_BUCKET:-pricey-receipts}
      # Use MINIO_ROOT_USER/PASSWORD for local MinIO, or set explicit credentials for cloud storage
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID:-minioadmin}
      STORAGE_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY:-minioadmin}
      STORAGE_PUBLIC_URL: ${STORAGE_PUBLIC_URL:-http://localhost:9000}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      CORS_ORIGIN: ${CORS_ORIGIN:-*}
      RATE_LIMIT_MAX: ${RATE_LIMIT_MAX:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-60000}
      SESSION_SECRET: ${SESSION_SECRET:?SESSION_SECRET is required}
      LLM_PROVIDER: ${LLM_PROVIDER:-github}
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      OLLAMA_HOST: ${OLLAMA_HOST:-http://ollama:11434}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
    ports:
      - '${API_PORT:-3001}:3001'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://127.0.0.1:3001/health']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  ocr-service:
    build:
      context: .
      dockerfile: docker/Dockerfile.ocr-service
    container_name: pricey-ocr-service-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3002
      HOST: 0.0.0.0
      DATABASE_URL: postgresql://${POSTGRES_USER:-pricey}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-pricey}
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      STORAGE_ENDPOINT: ${STORAGE_ENDPOINT:-http://minio:9000}
      STORAGE_REGION: ${STORAGE_REGION:-us-east-1}
      STORAGE_BUCKET: ${STORAGE_BUCKET:-pricey-receipts}
      # Use MINIO_ROOT_USER/PASSWORD for local MinIO, or set explicit credentials for cloud storage
      STORAGE_ACCESS_KEY_ID: ${STORAGE_ACCESS_KEY_ID:-minioadmin}
      STORAGE_SECRET_ACCESS_KEY: ${STORAGE_SECRET_ACCESS_KEY:-minioadmin}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LLM_PROVIDER: ${LLM_PROVIDER:-github}
      GITHUB_TOKEN: ${GITHUB_TOKEN:-}
      OLLAMA_HOST: ${OLLAMA_HOST:-http://ollama:11434}
      SENTRY_DSN: ${SENTRY_DSN:-}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
    ports:
      - '${OCR_PORT:-3002}:3002'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    # OCR service is a background worker, no HTTP health endpoint
    # healthcheck:
    #   test: ['CMD', 'wget', '--spider', '-q', 'http://127.0.0.1:3002/health']
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  web:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: pricey-web-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      HOSTNAME: 0.0.0.0
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://api-gateway:3001/api/v1}
      NEXT_PUBLIC_SENTRY_DSN: ${NEXT_PUBLIC_SENTRY_DSN:-}
      NEXT_PUBLIC_PLAUSIBLE_DOMAIN: ${NEXT_PUBLIC_PLAUSIBLE_DOMAIN:-}
    ports:
      - '${WEB_PORT:-3000}:3000'
    depends_on:
      api-gateway:
        condition: service_healthy
    healthcheck:
      test: ['CMD', 'wget', '--spider', '-q', 'http://127.0.0.1:3000/']
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Ollama for self-hosted LLM (local vision models)
  ollama:
    image: ollama/ollama:latest
    container_name: pricey-ollama-prod
    restart: unless-stopped
    ports:
      - '${OLLAMA_PORT:-11434}:11434'
    volumes:
      - ollama_data:/root/.ollama
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
    healthcheck:
      test: ['CMD', 'ollama', 'list']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    networks:
      - pricey-network
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  ollama_data:
    driver: local

networks:
  pricey-network:
    driver: bridge
