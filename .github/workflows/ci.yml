# CI Pipeline for Pricy
# Copyright (C) 2025 Matthias Wallner-GÃ©hri
# Licensed under AGPL-3.0

name: CI
permissions:
  contents: read

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  # Turborepo configuration
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  # Force color output for better logs
  FORCE_COLOR: 3
  # Centralized tool versions
  PNPM_VERSION: '10.19.0'
  NODE_VERSION: '24'

jobs:
  # Setup job - prepares environment and dependencies
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-install.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2 # Needed for turbo to detect changed files

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache node_modules
        id: cache-install
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.STORE_PATH }}
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma Client
        if: steps.cache-install.outputs.cache-hit != 'true'
        run: pnpm --filter @pricy/database db:generate

  # Lint job - runs ESLint and Prettier checks
  lint:
    name: Lint
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-lint-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json', '**/.eslintrc*', '**/eslint.config.js') }}
          restore-keys: |
            turbo-${{ runner.os }}-lint-

      - name: Run ESLint
        run: pnpm lint

      - name: Check formatting
        run: pnpm format:check

  # Type check job - validates TypeScript types
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-typecheck-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json', '**/tsconfig*.json') }}
          restore-keys: |
            turbo-${{ runner.os }}-typecheck-

      - name: Generate Prisma Client
        run: pnpm --filter @pricy/database db:generate

      - name: Run TypeScript compiler
        run: pnpm typecheck

  # Build job - compiles all packages
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-build-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json', '**/turbo.json') }}
          restore-keys: |
            turbo-${{ runner.os }}-build-

      - name: Generate Prisma Client
        run: pnpm --filter @pricy/database db:generate

      - name: Build all packages
        run: pnpm build

      - name: Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            **/dist
            **/.next
            **/build
          key: build-${{ runner.os }}-${{ github.sha }}

  # Test job - runs unit tests with coverage
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Restore Turborepo cache
        uses: actions/cache@v4
        with:
          path: .turbo
          key: turbo-${{ runner.os }}-test-${{ hashFiles('**/pnpm-lock.yaml', '**/package.json', '**/turbo.json') }}
          restore-keys: |
            turbo-${{ runner.os }}-test-

      - name: Generate Prisma Client
        run: pnpm --filter @pricy/database db:generate

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        if: always()
        with:
          files: |
            apps/api-gateway/coverage/lcov.info
          flags: unittests
          name: pricy-coverage
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Database job - validates migrations and schema
  database:
    name: Database Checks
    runs-on: ubuntu-latest
    needs: setup
    services:
      postgres:
        image: postgres:18-alpine
        env:
          POSTGRES_USER: pricy
          POSTGRES_PASSWORD: pricy
          POSTGRES_DB: pricy_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore node_modules cache
        id: cache-restore
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            **/node_modules
          key: pnpm-${{ runner.os }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            pnpm-${{ runner.os }}-

      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        env:
          DATABASE_URL: postgresql://pricy:pricy@localhost:5432/pricy_test
        run: pnpm --filter @pricy/database db:migrate

      - name: Check migration status
        env:
          DATABASE_URL: postgresql://pricy:pricy@localhost:5432/pricy_test
        run: pnpm --filter @pricy/database exec prisma migrate status

      - name: Validate schema
        env:
          DATABASE_URL: postgresql://pricy:pricy@localhost:5432/pricy_test
        run: pnpm --filter @pricy/database exec prisma validate

  # Summary job - ensures all checks pass
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, test, database]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]] || \
             [[ "${{ needs.typecheck.result }}" != "success" ]] || \
             [[ "${{ needs.build.result }}" != "success" ]] || \
             [[ "${{ needs.test.result }}" != "success" ]] || \
             [[ "${{ needs.database.result }}" != "success" ]]; then
            echo "One or more CI jobs failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"
